datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid()) @db.Uuid

  email String @unique

  profile Profile?

  projects Project[]

  albums Album[]

  googleId String? @unique @map("google_id")

  facebookId String? @unique @map("facebook_id")

  password String?

  Favorite Favorite[]

  followedBy User[] @relation("UserFollows", references: [id])
  following  User[] @relation("UserFollows", references: [id])

  showExplicit Boolean @default(false) @map("show_explicit")
  admin        Admin?

  @@map("users")
}

model Profile {
  id String @id @default(uuid()) @db.Uuid

  firstName String? @map("fist_name")

  lastName String? @map("last_name")

  nickname String? @unique

  user User @relation(fields: [userId], references: [id])

  userId String @unique @map("user_id") @db.Uuid

  summary String?

  socialLinks String[]

  @@map("profiles")
}

enum ProjectStatus {
  PUBLISHED
  DRAFT
}

model Project {
  id String @id @default(uuid()) @db.Uuid

  user User @relation(fields: [userId], references: [id])

  userId String @map("user_id") @db.Uuid

  items ProjectItem[]

  name String

  slug String?

  caption String?

  status ProjectStatus @default(DRAFT)

  preview String?

  createdAt DateTime @default(now()) @map("created_at")

  albums Album[]

  favorites Favorite[]

  security ProjectSecurity?

  isSecure Boolean @default(false) @map("is_secure")

  tags       Tag[]
  categories Category[]

  favoriteCount Int @default(0) @map("favorite_count")

  explicit Boolean @default(false)

  @@unique([userId, slug])
  @@index([favoriteCount])
  @@map("projects")
}

model ProjectSecurity {
  projectId String @id @map("project_id") @db.Uuid

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  passwordHash String @map("password_hash")
  passwordIv   String @map("password_iv")

  passwordVersion Int @default(1)

  @@map("project_security")
}

enum ProjectItemType {
  IMAGE
  YOUTUBE
}

model ProjectItem {
  id String @id @default(uuid()) @db.Uuid

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  projectId String @map("project_id") @db.Uuid

  title String?

  caption String?

  type ProjectItemType

  value String

  @@map("project_items")
}

model Favorite {
  id String @id @default(uuid()) @db.Uuid

  projectId String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  collections Collection[]

  @@unique([projectId, userId])
  @@map("favorites")
}

model Collection {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  name   String

  Favorites Favorite[]

  @@map("collections")
}

model Album {
  id String @id @default(uuid()) @db.Uuid

  name String

  slug String?

  projects Project[]

  user User @relation(fields: [userId], references: [id])

  userId String @map("user_id") @db.Uuid

  security AlbumSecurity?

  isSecure Boolean @default(false) @map("is_secure")

  @@unique([userId, slug])
  @@map("albums")
}

model AlbumSecurity {
  albumId String @id @map("album_id") @db.Uuid

  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  passwordHash String @map("password_hash")
  passwordIv   String @map("password_iv")

  passwordVersion Int @default(1)

  @@map("album_security")
}

model Tag {
  id Int @id @default(autoincrement())

  name String @unique

  projects Project[]

  @@map("tags")
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  projects Project[]

  @@map("categories")
}

enum Permission {
  SUPER
  BLOCK_PROJECT
  BLOCK_USER
}

model Admin {
  userId String @id @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  permissions Permission[]

  roles Role[]

  @@map("admins")
}

model Role {
  name String @id

  permissions Permission[]

  admins Admin[]

  @@map("roles")
}
